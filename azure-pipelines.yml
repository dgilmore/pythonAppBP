variables:
  #service connection string for production func
  azureSubscriptionProd: myAppConnectionString

  #service connection string for QA func
  azureSubscriptionQA: myConnectionStringQA

  #vmImage type
  vmImageType: ubuntu-16.04

  
trigger:
- master

stages:
- stage: Build
  displayName: Build Stage

  jobs:
  - job:
    displayName: Build
    pool:
      vmImage: $(vmImageType)
    steps:
    - task: UsePythonVersion@0
      displayName: "Setting python version to 3.7 as required by functions"
      inputs:
        versionSpec: '3.7'
        architecture: 'x64'
    - bash: |
        if [ -f extensions.csproj ]
        then
            dotnet build extensions.csproj --output ./bin
        fi
        pip install --target="./.python_packages/lib/site-packages" -r ./requirements.txt
        python -m pip install truffleHog
        trufflehog https://github.com/dgilmore/pythonAppBP.git
      displayName: Install Dependency and Test
    - task: ArchiveFiles@2
      displayName: "Archive files"
      inputs:
        rootFolderOrFile: "$(System.DefaultWorkingDirectory)"
        includeRootFolder: false
        archiveType: zip
        archiveFile: "$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip"
    - task: PublishPipelineArtifact@1
      inputs: 
        path: "$(System.DefaultWorkingDirectory)/build$(Build.BuildId).zip"
        artifact: WebApp

- stage: QA
  displayName: Deploy to QA
  dependsOn: Build
  condition: succeeded()

  jobs:
  - job:
    displayName: deploy to QA
    pool:
      vmImage: $(vmImageType)
    steps:
    - task: DownloadPipelineArtifact@2
      inputs:
        artifact: 'WebApp'
    - task: AzureFunctionApp@1
      displayName: 'azure func QA deploy'
      inputs:
        azureSubscription: $(azureSubscriptionQA)
        appType: functionAppLinux
        appName: 'BPapp-QA'
        package: '$(Pipeline.Workspace)/build$(Build.BuildId).zip'

- stage: Test
  displayName: Test QA Endpoint
  dependsOn: QA
  condition: succeeded()
  jobs:
  - job: 
    displayName: Test QA Endpoint
    pool:
      vmImage: $(vmImageType)
    steps:
    - bash: |
        STATUS=$(curl -s -o /dev/null -w "%{http_code}" https://bpapp-qa.azurewebsites.net/api/HttpExample)
        if [ $STATUS -eq 400 ];then
          echo "Status 400: Passed"
        else
          echo "Got $STATUS"
          exit 1
        fi

        STATUS==$(curl -s -o /dev/null -w "%{http_code}" https://bpapp-qa.azurewebsites.net/api/HttpExample?name=mark)
        if [ $STATUS -eq 200 ];then
          echo "Status $STATUS: Passed"
        else
          echo "Got $STATUS"
          exit 1
        fi
- stage: Production
  displayName: Deploy to Production
  dependsOn: Test
  condition: succeeded()

  jobs:
  - job: 
    displayName: deploy to production
    pool:
      vmImage: $(vmImageType)
    steps:
    - task: DownloadPipelineArtifact@2
      inputs: 
        artifact: 'WebApp'
    - task: AzureFunctionApp@1
      displayName: 'azure func production deploy'
      inputs:
        azureSubscription: $(azureSubscriptionProd)
        appType: functionAppLinux
        appName: 'bpapp'
        package: '$(Pipeline.Workspace)/build$(Build.BuildId).zip'
    



